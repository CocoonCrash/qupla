import Qupla

template bin2trin<T>
{
  func T bin2trin<T>(T val)
  {
    brk = break<T>(val)
    return bin2trin2<T>(val, 0, 1)
  }

  func T bin2trin2<T>(T remain , T sum, T power)
  {
    newSum = isOne[remain[0]] ? add<T>(sum, power) : sum
    done = isZero[sign<T>(remain)]
    return done ? sum : bin2trin2<T>(lshift<T>(remain), newSum, add<T>(power, power))
  }
}

use bin2trin<Int>, <Huge>, <Hash>, <Hash3>, <Hash9>

use break<Hash3>, <Hash9>
use incr<Hash3>, <Hash9>
use sign<Hash3>, <Hash9>
use lshift<Hash3>, <Hash9>
use add<Hash3>, <Hash9>
use halfAdd<Hash3>, <Hash9>
use fullAdd<Hash3>, <Hash9>

test 0 = bin2trin<Int>(0)
test 1 = bin2trin<Int>(1)
test 2 = bin2trin<Int>(3)
test 3 = bin2trin<Int>(4)
test 15 = bin2trin<Int>(40)
test 255 = bin2trin<Int>(3280)
test 65535 = bin2trin<Int>(21523360)
test 4294967295 = bin2trin<Huge>(926510094425920)
// some of the tests may be grained with zeroes inbetween the 111...111 sequence, don't worry when calculating 2^n-1 and (3^n-1)/2 yourown
test 340282366920938463463374607431768211455 = bin2trin<Hash>(5895092288869291585760436430706259332839105796137920554548480)
test 115792089237316195423570985008687907853269984665640564039457584007913129639935
  = bin2trin<Hash3>(69504226188572366382469893394830651557109425404264568995802412215018036314883217970500884577054804760905832770274449717760)
test 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095
  = bin2trin<Hash3>(9661674916144457552727034361009790527700732880801664275092268814451233373207768500008969714893014677195041164647293059752576754550666470442049020239364319771280275066863699741389031161203686169060521699834121138295895752329492941497636218270720)
test 179769308128688554841593914336777228061788645087206598745762043938980733953745707508027864856415641942640823241898028769893055642878690194031277212647185337028480491457581597864186726890708791588267512013107914692314913190551492247774529330958055264124819053398988059396676162108264800478523162911021390102523
  = bin2trin<Hash9>(186695924370069331493319608213469809026120840269878529864401083138484546852557016082547942836221729172284179845394434319822072666510763444429975462187449479415343223072455417061004069708018863884709587406765210511026171923411791023565100951052266843751891497803359615503592287914493445124195050471647146311769968524981088534884337335397635320260306267407703218825677345201222906845325815734555633487154320091345760111767956553023832139344844800265683541905371098976094347829428199236771564)



// for comparison: here is @hello_world's version
// very cool to see the differences in approach

//import Qupla
//
////LUT logic: return ternary from binary
//lut fromBin {
//  0,0 = 0,0
//  1,0 = 1,0
//  0,1 = -,1
//  1,1 = 0,1
//}
//
//type t2 [2]
//type t4 [t2 * 2]
//type t8 [t4 * 2]
//type t16 [t8 * 2]
//type t32 [t16 * 2]
//type t64 [t32 * 2]
//type t128 [t64 * 2]
//type t256 [t128 * 2]
//type t512 [t256 * 2]
//type t1024 [t512 * 2]
//
//type t12 [t4 * 3]
//type t24 [t8 * 3]
//type t48 [t16 * 3]
//type t96 [t32 * 3]
//type t192 [t64 * 3]
//type t384 [t128 * 3]
//type t768 [t256 * 3]
//type t1536 [t512 * 3]
//
//use halfAdd2<t2>, <t4>, <t8>, <t16>, <t32>, <t64>, <t128>, <t256>, <t512>, <t1024>
//use as<t2>, <t4>, <t8>, <t16>, <t32>, <t64>, <t128>, <t256>, <t512>, <t1024>
//use all2<t2>, <t4>, <t8>, <t16>, <t32>, <t64>, <t128>, <t256>, <t512>, <t1024>
//use sign2<t2>, <t4>, <t8>, <t16>, <t32>, <t64>, <t128>, <t256>, <t512>, <t1024>
//use sign2<t12>, <t24>, <t48>, <t96>, <t192>, <t384>, <t768>, <t1536>
//use fullAdd2<t2>, <t4>, <t8>, <t16>, <t32>, <t64>, <t128>, <t256>, <t512>, <t1024>
//use fullMul2<t4>, <t8>, <t16>, <t32>, <t64>, <t128>, <t256>, <t512>, <t1024>
//use fullMul<t12>, <t24>, <t48>, <t96>, <t192>, <t384>, <t768>, <t1536>
//
//
//func t2 fromBin<t2> (t2 x) {
//    return fromBin[x[0:1],x[1:1]]
//}
//
//func t4 twoOver<t4>(t2 x){
//  return 1 & - & - & 1
//}
//
//template twoOver<T>{
//  type P [T / 2]
//  func T twoOver<T>(t2 x){
//    return fullMul<P>(twoOver<P>(1), twoOver<P>(1))
//  }
//}
//
//use twoOver<t8>, <t16>, <t32>, <t64>, <t128>, <t256>, <t512>, <t1024>
//
//func t4 fromBin<t4> (t4 x) {
//    lo = x[0 : 2]
//    hi = x[2 : 2]
//    tlo = fromBin[lo[0:1],lo[1:1]] & 0 & 0 & 0 & 0
//    thi = fullMul<Tryte>(4,fromBin[hi[0:1],hi[1:1]]&0)
//    y = fullAdd<Tryte2>(
//      tlo,
//      thi,
//      0)
//    return y[0 : t4]
//}
//
//template fromBin<T>{
//  type P [T / 2]
//
//  func T fromBin<T> (T x) {
//    lo = x[0 : P]
//    hi = x[P : P]
//    tlo = fromBin<P>(lo) & all<P>(0)
//    top = twoOver<P>(1)
//    thilo = fromBin<P>(hi)
//    thi = fullMul<P>(top, thilo)
//    y = fullAdd<T>(
//      tlo,
//      thi,
//      0)
//    return y[0 : T]
//  }
//
//
//}
//
//use fromBin<t8>, <t16>, <t32>, <t64>, <t128>, <t256>, <t512>, <t1024>
//
//test 0 = fromBin<Trit2>(0)
//test 1 = fromBin<Trit2>(1)
//test 2 = fromBin<Trit2>(3)
//test 3 = fromBin<Trit2>(4)
//test 15 = fromBin<t4>(40)
//test 255 = fromBin<t8>(3280)
//test 65535 = fromBin<t16>(21523360)
//test 4294967295 = fromBin<t32>(926510094425920)
//// some of the tests may be grained with zeroes inbetween the 111...111 sequence, don't worry when calculating 2^n-1 and (3^n-1)/2 yourown
//test 340282366920938463463374607431768211455 = fromBin<t128>(5895092288869291585760436430706259332839105796137920554548480)
//test 115792089237316195423570985008687907853269984665640564039457584007913129639935
//  = fromBin<t256>(69504226188572366382469893394830651557109425404264568995802412215018036314883217970500884577054804760905832770274449717760)
//test 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095
//  = fromBin<t512>(9661674916144457552727034361009790527700732880801664275092268814451233373207768500008969714893014677195041164647293059752576754550666470442049020239364319771280275066863699741389031161203686169060521699834121138295895752329492941497636218270720)
//test 179769308128688554841593914336777228061788645087206598745762043938980733953745707508027864856415641942640823241898028769893055642878690194031277212647185337028480491457581597864186726890708791588267512013107914692314913190551492247774529330958055264124819053398988059396676162108264800478523162911021390102523
//  = fromBin<t1024>(186695924370069331493319608213469809026120840269878529864401083138484546852557016082547942836221729172284179845394434319822072666510763444429975462187449479415343223072455417061004069708018863884709587406765210511026171923411791023565100951052266843751891497803359615503592287914493445124195050471647146311769968524981088534884337335397635320260306267407703218825677345201222906845325815734555633487154320091345760111767956553023832139344844800265683541905371098976094347829428199236771564)
