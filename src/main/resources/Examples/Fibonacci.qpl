import Qupla

// Fibonacci: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// returns the n-th Fibonacci number,
// shitty version due to 2^n function calls
// acts as if it hangs due to exponential calls for n=30
// Java equivalent:
// return (n < 2) ? n : (fib(n - 1) + fib(n - 2))

type FibInt [Huge]

func FibInt fibonacci (FibInt n) {
  // check if n < 2, which means return n, otherwise recurse
  retN = isLess[cmp<FibInt>(n, 2)]

  // recursion case
  nMin1 = decr<FibInt>(n)
  nMin2 = sub<FibInt>(n, 2)
  return retN ? n : add<FibInt>(fibonacci(nMin1), fibonacci(nMin2))
}

// returns the n-th Fibonacci number,
// smart version, using n function calls
// can go up to n=180 when using a Huge
// Java equivalent:
// return (n == 0 || n == 1) ? n : fibPart2(n - 2, 0, 1)

func FibInt fibonacci2 (FibInt n) {
  // check if n equals 0 or 1, which means return n, otherwise recurse
  retN = isLess[cmp<FibInt>(n, 2)]
  return retN ? n : fibPart2(sub<FibInt>(n, 2), 0, 1)
}

// helper function
// Java equivalent:
// fib2 = fib0 + fib1
// return (n == 0) ? fib2 : fibPart2(n - 1, fib1, fib2)

func FibInt fibPart2 (FibInt n, FibInt fib0, FibInt fib1) {
  // check if n equals 0, which means return fib2, otherwise recurse
  retFib2 = isZero[sign<FibInt>(n)]
  fib2 = add<FibInt>(fib0, fib1)
  return retFib2 ? fib2 : fibPart2(decr<FibInt>(n), fib1, fib2)
}


test  0 = fibonacci(0)
test  1 = fibonacci(1)
test  1 = fibonacci(2)
test  2 = fibonacci(3)
test  3 = fibonacci(4)
test  5 = fibonacci(5)
test  8 = fibonacci(6)
test 55 = fibonacci(10)

test  0 = fibonacci2(0)
test  1 = fibonacci2(1)
test  1 = fibonacci2(2)
test  2 = fibonacci2(3)
test  3 = fibonacci2(4)
test  5 = fibonacci2(5)
test  8 = fibonacci2(6)
test 55 = fibonacci2(10)

eval fibonacci2(180)
