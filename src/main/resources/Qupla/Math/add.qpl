// returns lhs + rhs

template add<T> {
  func T add<T> (T lhs, T rhs) {
    // use full adder but don't return the carry trit
    sum = fullAdd<T>(lhs, rhs, 0)
    return sum[0 : T]
  }
}

use add<Trit>, <Tryte>, <Tiny>, <Int>, <Huge>, <Hash>
use add<Tryte2>, <Tiny2>, <Int2>, <Int4>, <Huge2>


test  0 = add<Tiny>( 0,  0)

test  1 = add<Tiny>( 0,  1)
test  1 = add<Tiny>( 1,  0)
test  2 = add<Tiny>( 1,  1)
test  2 = add<Tiny>( 0,  2)
test  2 = add<Tiny>( 2,  0)
test  3 = add<Tiny>( 1,  2)
test  3 = add<Tiny>( 2,  1)
test  4 = add<Tiny>( 2,  2)

test -1 = add<Tiny>( 0, -1)
test -1 = add<Tiny>(-1,  0)
test -2 = add<Tiny>(-1, -1)
test -2 = add<Tiny>( 0, -2)
test -2 = add<Tiny>(-2,  0)
test -3 = add<Tiny>(-1, -2)
test -3 = add<Tiny>(-2, -1)
test -4 = add<Tiny>(-2, -2)

test  0 = add<Tiny>( 1, -1)
test -1 = add<Tiny>( 1, -2)
test  1 = add<Tiny>( 2, -1)
test  0 = add<Tiny>( 2, -2)

test  0 = add<Tiny>(-1,  1)
test  1 = add<Tiny>(-1,  2)
test -1 = add<Tiny>(-2,  1)
test  0 = add<Tiny>(-2,  2)

test  6 = add<Tiny>( 3,  3)
test  0 = add<Tiny>( 3, -3)
test  0 = add<Tiny>(-3,  3)
test -6 = add<Tiny>(-3, -3)
