// LUT logic: return (trit1 < trit2) ? - : (trit1 > trit2) ? 1 : 0;
lut cmp {
  -,- = 0
  0,- = 1
  1,- = 1
  -,0 = -
  0,0 = 0
  1,0 = 1
  -,1 = -
  0,1 = -
  1,1 = 0
}

// LUT logic: return (Bool) (trit1 < 0)
lut isLess {
  - = 1
  0 = -
  1 = -
}

// LUT logic: return (Bool) (trit1 > 0)
lut isGreater {
  - = -
  0 = -
  1 = 1
}

// LUT logic: return (Bool) (trit1 == 0)
lut isEqual {
  - = -
  0 = 1
  1 = -
}

// LUT logic: return (Bool) (trit1 >= 0)
lut notLess {
  - = -
  0 = 1
  1 = 1
}

// LUT logic: return (Bool) (trit1 <= 0)
lut notGreater {
  - = 1
  0 = 1
  1 = -
}

// LUT logic: return (Bool) (trit1 != 0)
lut notEqual {
  - = 1
  0 = -
  1 = 1
}


// returns (Bool) ((lhs < rhs) ? - : (lhs > rhs) ? 1 : 0)

func Trit cmp<Trit> (Trit lhs, Trit rhs) {
  return cmp[lhs, rhs]
}

template cmp<T> = A + B + C {
  type A [T / 3]
  type B [T / 3]
  type C [T / 3]

  func Trit cmp<T> (T lhs, T rhs) {
    return sign[cmp<A>(lhs[0 : A], rhs[0 : A]),
                cmp<B>(lhs[A : B], rhs[A : B]),
                cmp<C>(lhs[A + B : C], rhs[A + B : C])]
  }
}

use cmp<Tryte>, <Tiny>, <Int>, <Huge>, <Hash>

template cmp2<T> = A + B {
  type A [T / 2]
  type B [T / 2]

  func Trit cmp<T> (T lhs, T rhs) {
    return sign[cmp<A>(lhs[0 : A], rhs[0 : A]),
                cmp<B>(lhs[A : B], rhs[A : B]),
                0]
  }
}

use cmp2<Tryte2>, <Tiny2>, <Tiny4>, <Int2>, <Int4>, <Huge2>


test 0 = cmp<Tiny>(-1, -1)
test - = cmp<Tiny>(-1, 0)
test - = cmp<Tiny>(-1, 1)
test 1 = cmp<Tiny>(0, -1)
test 0 = cmp<Tiny>(0, 0)
test - = cmp<Tiny>(0, 1)
test 1 = cmp<Tiny>(1, -1)
test 1 = cmp<Tiny>(1, 0)
test 0 = cmp<Tiny>(1, 1)
test - = cmp<Tiny>(10, 20)
test 1 = cmp<Tiny>(20, 10)
test - = cmp<Tiny>(-30, 40)
test 1 = cmp<Tiny>(40, -30)
test 1 = cmp<Tiny>(50, -60)
test - = cmp<Tiny>(-60, 50)
test 1 = cmp<Tiny>(-70, -80)
test - = cmp<Tiny>(-80, -70)
test 0 = cmp<Tiny>(90, 90)
test 0 = cmp<Tiny>(-100, -100)

test 0 = cmp<Tiny2>(-1, -1)
test - = cmp<Tiny2>(-1, 0)
test - = cmp<Tiny2>(-1, 1)
test 1 = cmp<Tiny2>(0, -1)
test 0 = cmp<Tiny2>(0, 0)
test - = cmp<Tiny2>(0, 1)
test 1 = cmp<Tiny2>(1, -1)
test 1 = cmp<Tiny2>(1, 0)
test 0 = cmp<Tiny2>(1, 1)
test - = cmp<Tiny2>(10, 20)
test 1 = cmp<Tiny2>(20, 10)
test - = cmp<Tiny2>(-30, 40)
test 1 = cmp<Tiny2>(40, -30)
test 1 = cmp<Tiny2>(50, -60)
test - = cmp<Tiny2>(-60, 50)
test 1 = cmp<Tiny2>(-70, -80)
test - = cmp<Tiny2>(-80, -70)
test 0 = cmp<Tiny2>(90, 90)
test 0 = cmp<Tiny2>(-100, -100)
