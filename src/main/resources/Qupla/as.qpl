// returns val

// this function can be used as a cast operator
// for constants to cast them to specific size
// it can be handy in this case for example:
// return f(a) & as<Tryte>(12) & f(b)

template as<T> {
  func T as<T> (T val) {
    return val
  }
}

use as<Trit>, <Tryte>, <Tiny>, <Int>, <Huge>, <Hash>
use as<Tryte2>, <Tiny2>, <Tiny4>, <Int2>, <Huge2>


test 1 = as<Trit>(1)
test 2 = as<Tryte>(2)
test -10 = as<Tiny>(-10)
test 123 = as<Int>(123)
test 0 = as<Huge>(0)
