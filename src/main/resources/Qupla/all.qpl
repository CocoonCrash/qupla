// returns a trit vector that repeats the input trit
// passing 1 will generate the maximum value for the return type
// passing 0 will generate zero for the return type (pretty useless)
// passing - will generate the minimum value for the return type

func Trit all<Trit> (Trit val) {
  return val
}

template all<T> {
  type P [T / 3]

  func T all<T>(Trit val) {
  return all<P>(val) & all<P>(val) & all<P>(val)
}
}

use all<Tryte>, <Tiny>, <Int>, <Huge>, <Hash>, <Hash3>, <Hash9>, <Signature>

template all2<T> {
  type P [T / 2]

  func T all<T>(Trit val) {
  return all<P>(val) & all<P>(val)
}
}

use all2<Tryte2>, <Tiny2>, <Tiny4>, <Int2>, <Huge2>

test 1 = all<Trit>(1)
test 13 = all<Tryte>(1)
test 9841 = all<Tiny>(1)
test 3812798742493 = all<Int>(1)
test -221713244121518884974124815309574946401 = all<Huge>(-)
test 0 = all<Huge>(0)
test 221713244121518884974124815309574946401 = all<Huge>(1)
