// LUT logic: return (Bool) (trit1 == trit2)
lut equal {
  -,- = 1
  -,0 = -
  -,1 = -
  0,- = -
  0,0 = 1
  0,1 = -
  1,- = -
  1,0 = -
  1,1 = 1
}

// LUT logic: return (Bool) (trit1 == -)
lut isMin {
  - = 1
  0 = -
  1 = -
}

// LUT logic: return (Bool) (trit1 < 0)
lut isNegative {
  - = 1
  0 = -
  1 = -
}

// LUT logic: return (Bool) (trit1 == 1)
lut isOne {
  - = -
  0 = -
  1 = 1
}

// LUT logic: return (Bool) (trit1 > 0)
lut isPositive {
  - = -
  0 = -
  1 = 1
}

// LUT logic: return (Bool) (trit1 == 0)
lut isZero {
  - = -
  0 = 1
  1 = -
}

// LUT logic: return (Bool) (trit1 >= 0)
lut notNegative {
  - = -
  0 = 1
  1 = 1
}

// LUT logic: return (Bool) (trit1 <= 0)
lut notPositive {
  - = 1
  0 = 1
  1 = -
}

// LUT logic: return (Bool) (trit1 != 0)
lut notZero {
  - = 1
  0 = -
  1 = 1
}


// returns (Bool) lhs == rhs

func Bool equal<Trit>(Trit lhs, Trit rhs) {
  return equal[lhs, rhs]
}

template equal<T> {
  type P [T / 3]

  func Bool equal<T>(T lhs, T rhs) {
    eq0 = equal<P>(lhs[P * 0 : P], rhs[P * 0 : P])
    eq1 = equal<P>(lhs[P * 1 : P], rhs[P * 1 : P])
    eq2 = equal<P>(lhs[P * 2 : P], rhs[P * 2 : P])
    return and3[eq0, eq1, eq2]
  }
}

use equal<Tryte>, <Tiny>, <Int>, <Huge>, <Hash>


template equal2<T> {
  type P [T / 2]

  func Bool equal<T>(T lhs, T rhs) {
    eq0 = equal<P>(lhs[P * 0 : P], rhs[P * 0 : P])
    eq1 = equal<P>(lhs[P * 1 : P], rhs[P * 1 : P])
    return and[eq0, eq1]
  }
}

use equal2<Tryte2>, <Tiny2>, <Tiny4>, <Int2>, <Huge2>


test 1 = equal<Int>(-1, -1)
test - = equal<Int>(-1, 0)
test - = equal<Int>(-1, 1)
test - = equal<Int>(0, -1)
test 1 = equal<Int>(0, 0)
test - = equal<Int>(0, 1)
test - = equal<Int>(1, -1)
test - = equal<Int>(1, 0)
test 1 = equal<Int>(1, 1)
test - = equal<Int>(10, 20)
test - = equal<Int>(-30, 40)
test - = equal<Int>(50, -60)
test - = equal<Int>(-70, -80)
test 1 = equal<Int>(90, 90)
